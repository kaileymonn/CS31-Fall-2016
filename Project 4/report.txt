Notable obstacles:
Figuring out how to design the split function without creating a separate array took a while.
Coming up with enough test cases to thoroughly test all scenarios.

Test data:
	string g[4] = { "bernie", "hillary", "jeb", "carly" };
	//Test appendToAll
	assert(appendToAll(g, 4, "?") == 4 && g[0] == "bernie?" && g[3] == "carly?");
	assert(appendToAll(g, -5, "?") == -1);

	string h[8] = { "bernie", "hillary", "donald", "jeb", "", "carly", "ben", "jeb"};
	//Test lookup
	assert(lookup(h, -5, "carly") == -1);
	assert(lookup(h, 7, "carly") == 5);
	assert(lookup(h, 7, "donald") == 2);
	assert(lookup(h, 2, "donald") == -1);

	//Test positionOfMax
	assert(positionOfMax(h, 0) == -1);
	assert(positionOfMax(h, 8) == 3);

	//Test rotateLeft
	string running[5] = { "carly", "mike", "ted", "bernie", "jeb" };
	assert(rotateLeft(running, 5, 1) == 1 && running[1] == "ted" && running[3] == "jeb" && running[4] == "mike");

	//Test countRuns
	string d[10] = { "ben", "ben", "chris", "marco", "marco", "donald", "donald", "donald", "marco", "marco" };
	assert(countRuns(d, 10) == 5);

	//Test flip
	string folks[6] = { "chris", "marco", "", "ben", "donald", "john" };
	assert(flip(folks, 4) == 4 && folks[0] == "ben" && folks[1] == "" && folks[3] == "chris" && folks[5] == "john");

	//Test differ
	string folk[6] = { "chris", "marco", "", "ben", "donald", "john" };
	string group[5] = { "chris", "marco", "john", "", "carly" };
	assert(differ(folk, 6, group, 5) == 2);
	assert(differ(folk, 2, group, 1) == 1);

	//Test subsequence
	string e[4] = { "donald", "jeb", "", "carly" };
	string random[4] = { "lol", "this", "is", "rubbish" };
	string k1[7] = {"hi", "im", "hey", "hi", "im", "kai"};
	string k2[3] = {"hi", "im", "kai"};
	string k3[7] = { "hi", "im", "kai", "hey", "hi", "im", "kai" };
	assert(subsequence(h, 7, e, 4) == 2);
	assert(subsequence(h, 7, random, 4) == -1);
	assert(subsequence(h, 7, random, 0) == 0);
	assert(subsequence(h, 0, random, 4) == -1);
	assert(subsequence(k1, 6, k2, 3) == 3); //Test to determine if full sequence in a2 is accounted for
	assert(subsequence(k3, 7, k2, 3) == 0); //Test for multiple occurences of sequence

	//Test lookupAny
	string names[10] = { "ted", "hillary", "rand", "bernie", "mike", "jeb" };
	string set1[10] = { "carly", "mike", "bernie", "hillary" };
	string set2[10] = { "ben", "donald" };
	assert(lookupAny(names, 6, set1, 4) == 1);
	assert(lookupAny(names, 6, set2, 2) == -1);

	//Test split
	string cand[6] = { "bernie", "hillary", "donald", "marco", "carly", "ben" };
	string cand2[4] = { "donald", "hillary", "jeb", "ben" };
	assert(split(cand, 6, "chris") == 3); //Test when splitter is not an element in the array
	assert(split(h, 8, "carly") == 3 && h[3] == "carly"); //Test when splitter is an element in the array
	assert(split(cand2, 4, "donald") == 1 && cand2[1] == "donald"); //Test when splitter is first element in the array
